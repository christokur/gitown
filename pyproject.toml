[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core",
]

[tool.poetry]
name = "gitown"
version = "0.2.5"
description = "Keep your github CODEOWNERS file up to date."
authors = ["Christo De Lange <christo.delange@sands.com>", "Milind Shakya <sh.milind@gmail.com>"]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
keywords = [
    "git",
    "gitown",
    "pre-commit",
]
license = "MIT"
packages = [
    { include = "gitown" },
]
#include = [
#    "*.cfg",
#    "*.json",
#    "*.yaml",
#]

[tool.poetry.scripts]
gitown = "gitown.gitown:main"

[[tool.poetry.source]]
name = "codeartifact"
url = "https://artifacts-433714148419.d.codeartifact.us-east-2.amazonaws.com/pypi/pypi/simple/"

[tool.poetry.urls]
Source = "https://github.com/milin/gitown"
Homepage = "https://github.com:SandsB2B/pre-commit-hook-gitown"

[tool.poetry.dependencies]
python = ">=3.8,<3.12.0"
pre-commit = "~2.21.0"
invoke = "~1.7.3"

[tool.poetry.group.dev.dependencies]
radon = "5.1.0"
pdbr = { version = "0.7.5", markers = "sys_platform != 'win32'" }
inflection = "^0.5.1"
pytest-click = "^1.1.0"

pip = "~22.3"
poetry = "~1.3.2"
#tox = "~3.26.0"
#tox-pyenv = "~1.1.0"
cachecontrol = "^0.12.11"
lockfile = "0.12.2"
virtualenv = "~20.10.0"
black = "~22.10.0"
isort = "~5.10.1"
pydocstyle = { version = "~6.1.1", extras = ["toml"] }
pytest = "~7.2.0"
pytest-cov = "~4.0.0"
poethepoet = "~0.15.0"
coverage = { version = "~6.5.0", extras = ["toml"] }
#pre-commit = "~2.21.0"
pyproject-fmt = "~0.3.5"
# https://githubplus.com/PyCQA/prospector/issues/539 1.7.7 with pylint>=2.15.7
# We can either pin pylint or hope a newer prospector fixes the problem.
# UPDATE: Fixed in 1.8.4 ... By US! :)
#pylint = "==2.15.6"
#prospector = { extras = ["with-everything"], version = "~1.8.4" }
prospector = { git = "https://github.com/christokur/prospector.git", extras = ["with-everything"], branch = "master" }
gitlint = "^0.18.0"
commitizen = "^2.38.0"
python-coveralls = "2.9.3"
pytest-doctestplus = "~0.12.1"
pytest-html = "^3.2.0"
#mkdocs = "~1.4.2"
#portray = "~1.8.0"
pdocs = { git = "https://github.com/christokur/pdocs.git", branch = "master" }
portray = { git = "https://github.com/christokur/portray.git", branch = "main" }
mkdocs-material = ">=8.1.4,<9.0.0"
mdx-include = ">=1.4.1,<2.0.0"
mkdocs-markdownextradata-plugin = ">=0.1.7,<0.3.0"
poetry-plugin-bump2version = "~0.9.0"
#invoke = "~1.7.3"
#gitown = { git = "https://github.com/christokur/gitown.git", branch="master" }

[tool.poetry_bump2version.options]
list = true
allow_dirty = true
tag = true
commit = true
verbose = 1

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
# 'force-exclude' excludes files or directories in addition to the defaults
force-exclude = '(^/.github/*, ^/.vscode/*, .*\.tf, import_exception/*.py)'
# extend-exclude: keep excluding files from .gitignore in addition to the ones specified
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  ^.*invalid_python.py    # exclude a file named foo.py in the root of the project
  | .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
)
'''

[tool.flake8]
max-line-length = 120
extend-ignore = "E203"

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["--doctest-modules"]

[tool.pydocstyle]
convention = "google"
add_select = "D401,D404"

[tool.coverage.run]
command_line = "-m pytest tests/unit"
parallel = true
branch = true # measure branch coverage in addition to statement coverage

[tool.coverage.report]
fail_under = 90

[tool.coverage.paths]
source = [
    "src/b2blint",
    "**/site-packages/b2blint",
]

#[tool.tox]
#legacy_tox_ini = """
## tox.ini
#[tox]
#isolated_build = True
#envlist = python3.8,python3.9,python3.10,python3.11
#skip_missing_interpreters = True
#toxworkdir=/tmp/.tox
#temp_dir=/tmp
#
#[gh-actions]
#python =
#    3.9: lint, isort, python3.9
#    3.10: python3.10
#    3.11: python3.11
#
#[pytest]
#pep8maxlinelength = 120
#
#[pydocstyle]
#add-ignore = D107
#
#[testenv]
#deps = -rrequirements-dev.txt
#commands = py.test -s -v --cov-report term-missing --cov-report html --cov naming tests/
#recreate = True
#
#[testenv:lint]
#deps = -rrequirements-dev.txt
#commands = prospector --profile prospector.yaml
#
#[testenv:isort]
#deps =
#    isort
#commands =
#    - isort --check src
#ignore_errors = true
#"""

[tool.poe.env]
PYTHONWARNINGS = "ignore::Warning:setuptools.command.install"

[tool.poe.tasks]
pyproject-fmt = { shell = "pyproject-fmt pyproject.toml" }
check-lock = { shell = "poetry lock --check | grep -v 'not consistent'", help = "poetry lock workaround for https://github.com/nat-n/poethepoet/issues/91" }
set-lock = { shell = "poetry lock --no-update", help = "Locks the project dependencies in poetry.lock" }
pc-install = { shell = "pre-commit install; gitlint install-hook", help = "Set up pre-commit hooks"}
pc-autoupdate = { shell = "pre-commit autoupdate", help = "Auto update pre-commit hooks"}
hooks = { shell = "git add -A; pre-commit run", help = "Run pre-commit hooks" }
isort = { shell = "isort gitown tests", help = "isort imports in src and tests" }
black = { shell = "black gitown tests", help = "black formatting in src and tests" }
tests = { shell = "poetry run pytest tests", help = "pytest's" }
pros = { shell = "prospector --profile prospector.yaml", help = "Prospector" }
b2v = { cmd = "bump2version patch --new-version '${version}' --allow-dirty --commit", args = [{ name = "version", positional=true,multiple=false }], help = "Prospector" }
gcl = { shell = "cz changelog --incremental || { echo 'With incremental changelog we are ok when there is nothing new to add ...'; true; }", help = "Git Changelog" }
gl = { shell = "gitlint", help = "Gitlint last commit" }
gitown = { shell = "gitown --ownership_threshold=10 --codeowners_filename=CODEOWNERS CODEOWNERS", help = "Githib CODEOWNERS" }
format = { shell = "black --check --diff ." }
add = { shell = "git add -A" }
ibtl = { sequence = ["isort", "black", "tests", "lint"] }
doctests = { shell = "poetry run pytest --doctest-modules --verbose src", help = "doctest's" }
prepare = { sequence = ["locks", "exports", "formats", "tests", "gcl", "gitown", "add", "hooks"], help = "Do things to prepare for release" }
docs-build = { shell = "rm -fr site || true; PYTHONPATH=src poetry run portray as_html" }
docs-serve = { shell = "rm -fr site || true; PYTHONPATH=src poetry run portray in_browser --reload" }
pu = { shell = "poetry update", help = "Poetry update" }
pule = { sequence = ["pu", "locks", "exports"], help = "Poetry update and exports" }

exports = { sequence = ["export", "export-dev"], help = "Do things to export" }
formats = { sequence = ["isort", "black"], help = "Run checks" }
locks = { sequence = ["set-lock", "check-lock"], help = "Manage poetry.lock" }

[tool.poe.tasks.lint]
# pydocstyle src
shell = """
python -m black --check gitown tests
python -m isort --check-only gitown tests
python -m prospector --profile prospector.yaml
"""
help = "Do a few lint type checks"

[tool.poe.tasks.test-cov]
shell = """
coverage run -m pytest tests
coverage combine
coverage lcov -o coverage/lcov.info
coverage report
"""
help = "Check test coverage"

[tool.poe.tasks.tox]
shell = "poetry run tox"
help = "Run tox"

[[tool.poe.tasks.tox.args]]
name = "envlist"
options = ["-e"]
help = " work against specified environments (ALL selects all). (default: ALL)"
default = "ALL"

[tool.poe.tasks.export-dev]
shell = """
export PYTHONWARNINGS=ignore::Warning:setuptools.command.install
python3 -m poetry export --without-hashes --with dev -f requirements.txt -o requirements-dev.txt
"""
help = "Export poetry deps to requirements-dev.txt"
interpreter = "bash"

[tool.poe.tasks.export]
shell = """
export PYTHONWARNINGS=ignore::Warning:setuptools.command.install
python3 -m poetry export --without-hashes -f requirements.txt -o requirements.txt
"""
help = "Export poetry deps to requirements.txt"
env = { "PYTHONWARNINGS" = "ignore::Warning:setuptools.command.install" }
interpreter = "bash"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.7.3"
version_files = [
    ".bumpversion.cfg",
    "VERSION",
    "pyproject.toml:version",
    "src/naming/version.py",
]
tag_format = "v$version"
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.portray]
docs_dir = "docs"
output_dir = "site"
modules = ["gitown"]
port = 8002
append_directory_to_python_path = false
extra_markdown_extensions = ["admonition", "codehilite", "extra"]

[tool.portray.mkdocs]
site_name = "pre-commit-hook-gitown"
site_description = "CODEOWNERS for your B2B projects"
site_url = "https://christokur.github.io/gitown"
repo_url = "https://github.com/christokur/gitown"
edit_uri = "edit/master"
#copyright = "(c) 2022 Las Vegas Sands"

extra = { generator = false }
extra_css = ["/docs/css/termynal.css", "/docs/css/custom.css"]
extra_javascript = ["/docs/js/termynal.js", "/docs/js/custom.js"]
strict = true

[tool.portray.mkdocs.theme]
name = "material"
features = [ "search.suggest", "search.highlight", "content.tabs.link" ]
icon = { repo="fontawesome/brands/github-alt" }
custom_dir = "docs/overrides"

[[tool.portray.mkdocs.theme.palette]]
media = "(prefers-color-scheme: light)"
scheme = "default"
primary = "deep-purple"
accent = "brown"
toggle = { icon = "material/lightbulb", name = "Switch to light mode" }

[[tool.portray.mkdocs.theme.palette]]
media = "(prefers-color-scheme: dark)"
scheme = "slate"
primary = "deep-purple"
accent = "yellow"
toggle = { icon = "material/lightbulb-outline", name = "Switch to dark mode" }
